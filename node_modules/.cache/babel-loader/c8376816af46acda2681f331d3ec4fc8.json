{"ast":null,"code":"var _jsxFileName = \"/home/dev/Submission/react-personal-api/react-personal-api/src/component/image-results/ImageResults.js\";\nimport React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { GridList, GridTile } from 'material-ui/GridList';\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\n\nclass ImageResults extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      currentImg: ''\n    };\n\n    this.handleOpen = img => {\n      this.setState({\n        open: true,\n        currentImg: img\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n  }\n\n  render() {\n    let imageListContent;\n    const images = this.props.images;\n\n    if (images) {\n      imageListContent = React.createElement(GridList, {\n        cols: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, images.map(img => React.createElement(GridTile, {\n        title: img.tags,\n        key: img.id,\n        subtitle: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, \"by \", React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, \" \", img.user, \" \")),\n        actionIcon: React.createElement(IconButton, {\n          onClick: () => this.handleOpen(img.largeImageURL),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, React.createElement(ZoomIn, {\n          color: \"white\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: img.largeImageURL,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }))));\n    } else {\n      imageListContent = null;\n    }\n\n    const actions = [React.createElement(FlatButton, {\n      label: \"Close\",\n      primary: true,\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, imageListContent, React.createElement(GridList, {\n      cols: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, images.map(img => React.createElement(GridTile, {\n      title: img.tags,\n      key: img.id,\n      subtitle: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"by \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \" \", img.user, \" \")),\n      actionIcon: React.createElement(IconButton, {\n        onClick: () => this.handleOpen(img.largeImageURL),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(ZoomIn, {\n        color: \"white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: img.largeImageURL,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })))), React.createElement(Dialog, {\n      actions: actions,\n      modal: false,\n      open: this.state.open,\n      onRequestClose: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.currentImg,\n      alt: \"\",\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })));\n  }\n\n}\n\nImageResults.propTypes = {\n  images: propTypes.array.isRequired\n};\nexport default ImageResults;","map":{"version":3,"sources":["/home/dev/Submission/react-personal-api/react-personal-api/src/component/image-results/ImageResults.js"],"names":["React","Component","propTypes","GridList","GridTile","IconButton","ZoomIn","Dialog","FlatButton","ImageResults","state","open","currentImg","handleOpen","img","setState","handleClose","render","imageListContent","images","props","map","tags","id","user","largeImageURL","actions","width","array","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { GridList, GridTile } from 'material-ui/GridList';\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport Dialog from 'material-ui/Dialog'; \nimport FlatButton from 'material-ui/FlatButton';\n\nclass ImageResults extends Component {\nstate = {\n    open: false,\n    currentImg: ''\n}\n\nhandleOpen = img => {\n    this.setState ( {open: true, currentImg: img });\n}\n\nhandleClose = () => {\n    this.setState ({open: false});\n}\n\n    render() {\n        let imageListContent;\n        const {images} = this.props;\n\n        if(images){\n            imageListContent = (\n                <GridList cols={5}>\n                    {images.map(img =>(\n                        <GridTile\n                            title = {img.tags}\n                            key = {img.id}\n                            subtitle = {\n                                <span>\n                                    by <strong> {img.user} </strong>\n                                </span>\n                            }\n                            actionIcon = {\n                                <IconButton onClick = {() =>this.handleOpen(img.largeImageURL)}>\n                                    <ZoomIn color=\"white\"/>\n                                </IconButton>\n\n                            }\n                        >\n                            <img src = {img.largeImageURL} alt = \"\" />\n                        </GridTile>\n                        ))}\n                \n                </GridList>\n              \n            )\n\n\n        }else{\n            imageListContent = null\n        }\n\n        \n\n        const actions = [\n            <FlatButton label = \"Close\" primary = {true} onClick = {this.handleClose} />\n        ]\n        return <div> \n        {imageListContent}\n        <GridList cols={5}>\n                    {images.map(img =>(\n                        <GridTile\n                            title = {img.tags}\n                            key = {img.id}\n                            subtitle = {\n                                <span>\n                                    by <strong> {img.user} </strong>\n                                </span>\n                            }\n                            actionIcon = {\n                                <IconButton onClick = {() =>this.handleOpen(img.largeImageURL)}>\n                                    <ZoomIn color=\"white\"/>\n                                </IconButton>\n\n                            }\n                        >\n                            <img src = {img.largeImageURL} alt = \"\" />\n                        </GridTile>\n                        ))}\n                \n                </GridList>\n        \n        <Dialog  \n            actions = {actions}\n            modal = {false}\n            open = {this.state.open}\n            onRequestClose = {this.handleClose}>\n                <img src={this.state.currentImg} alt = \"\" style = {{ width: '100%' }}/>\n\n        </Dialog>\n        \n        </div> ;\n\n \n    }\n}\n    ImageResults.propTypes = {\n        images: propTypes.array.isRequired\n    \n}\n\nexport default ImageResults;"]},"metadata":{},"sourceType":"module"}